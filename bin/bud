#!/usr/bin/env ruby

# Use `bud`s Gemfile and bundler dependencies
root = File.expand_path(File.join(__dir__))
if File.file?(File.join(root, 'Gemfile.lock'))
  Dir.chdir(root) do
    require 'bundler/setup'
  rescue LoadError => e
    warn e.message
    warn "Run `gem install bundler` to install Bundler"
    exit(-1)
  end
end

require "dry/cli"
require "active_support/all"
require "yaml"
require "tty-command"
require "fileutils"
require "bump"
require "pathname"
require "rubygems"
require_relative "support"

DOCKER_PROGRESS = "auto" # auto|plain

module Buddy
  VERSION = "0.0.1"

  module CLI
    module Commands
      extend Dry::CLI::Registry

      class BaseCommand < Dry::CLI::Command
        def run(command)
          result = cmd.run(command)
          halt if result.failed?
          result
        rescue TTY::Command::ExitError => e
          halt
        end

        def halt(message: nil)
          message ||= "#{self.class} failed."
          yell message
          exit
        end
      end

      class Version < BaseCommand
        desc "Print version"

        def call(*)
          puts VERSION
        end
      end

      class Bump < BaseCommand
        desc "Bump gem"

        argument :level, desc: "major|minor|patch|pre"
        option :gem, aliases: ["-g"], required: false, desc: "The gem where you want to run the command on"

        def call(level: "minor", gem: nil, **)
          version, _ = ::Bump::Bump.run(level, commit: false, bundle: false, tag: false)

          add_v1_files

          run("bundle")

          say message(version)
        end
      end

      class Build < BaseCommand
        desc "Build the gem"

        option :gem, aliases: ["-g"], required: false, desc: "The gem where you want to run the command on"

        def call(gem: nil, **)
          FileUtils.mkdir_p "pkg"

          remove_previous_gem

          # We prepare these files so the cache does not get busted once the version is incremented in Gemfile.lock
          add_v1_files

          # Build the base image
          run("docker build -t avo_base -f ./../support/docker/Dockerfile.base ./../avo --progress #{DOCKER_PROGRESS}")
          # Build the image with Avo included
          run("docker build -t avo_gems -f ./../support/docker/Dockerfile.gems ./.. --progress #{DOCKER_PROGRESS}")
          say "Base Docker image built"

          # For Avo we use a special Dockerfile and building from the root directory
          dockerfile = (name == "avo") ? "Dockerfile.avo" : "Dockerfile"
          build_path = (name == "avo") ? "../." : "."

          # Build the build image
          say "Building Docker image"
          run("docker build -t #{name} -f ./../support/docker/#{dockerfile} #{build_path} --progress #{DOCKER_PROGRESS} --build-arg NAME=#{name} --build-arg GEMSPEC_NAME=#{gemspec_name} --build-arg BUNDLER_TOKEN=#{bundler_token}")
          say "Docker image built"

          src = "/#{name}/pkg/#{gemspec_name}-#{version}.gem"

          run "docker cp #{image_id}:#{src} #{destination_path}"
          say "Copied gem from docker image to #{destination_path}"

          run("appraisal")
        end
      end

      class Push < BaseCommand
        desc "Push the gem"

        option :gem, aliases: ["-g"], required: false, desc: "The gem where you want to run the command on"

        def call(gem: nil, **)
          if gemspec_name == "avo"
            `gem push --host https://rubygems.org/ ./pkg/#{gemspec_name}.gem`
          else
            `gem push --key github --host https://rubygems.pkg.github.com/avo-hq ./pkg/#{gemspec_name}.gem`
          end
        end
      end

      class Commit < BaseCommand
        desc "Commit the version change"
        option :gem, aliases: ["-g"], required: false, desc: "The gem where you want to run the command on"

        def call(gem: nil, **)
          if name == "avo"
            `git add ./lib/avo/version.rb`
          else
            `git add ./lib/avo/#{name}/version.rb`
          end
          `git add ./Gemfile.lock`

          `git add gemfiles/`

          tag = "v#{version}"

          `git commit -m "#{message(version)}"`
          `git tag -a -m "#{message(version)}" #{tag}`

          `git push origin main --follow-tags`
        end
      end

      class Release < BaseCommand
        desc "Release the gem"

        option :gem, aliases: ["-g"], required: false, desc: "The gem where you want to run the command on"
        option :skip_bump, type: :boolean, aliases: ["-sb"], required: false, desc: "Skip bumping the version."
        argument :level, desc: "major|minor|patch|pre"

        def call(gem: nil, skip_bump: false, level: "minor", **)
          # 1. Bump gem version
          if skip_bump
            # Run bundle to increment the version number in Gemfile.lock
            run("bundle")
          else
            Bump.new.call level:
          end
          # 2. Build the gem
          Build.new.call
          # 3. Push to GitHub packages
          Push.new.call
          # 4. commit & upload tag to git
          #    GitHub action will generate the release with release notes
          Commit.new.call
        end
      end

      class ReleaseAll < BaseCommand
        GEMS = ["avo", "avo-dashboards", "avo-menu", "avo-pro", "avo-dynamic_filters", "avo-advanced"]

        desc "Release #{GEMS.join(", ")}"

        option :skip_alarm, type: :boolean, aliases: ["-sa"], required: false, default: false, desc: "Skip alarm between releases."
        argument :level, desc: "major|minor|patch|pre"

        def alarm(frequency, duration)
          pid = spawn("speaker-test --frequency #{frequency} --test sine")
          sleep(duration)
          Process.kill("KILL", pid)
        end

        def call(level: "minor", skip_alarm:, **)
          GEMS.each do |gem|
            unless skip_alarm
              alarm 400, 0.19
              alarm 500, 0.19
              alarm 600, 0.19
            end

            Dir.chdir(gem) do
              `bundle`
              Release.new.call gem:, level:
            end
          end
        end
      end

      class Run < BaseCommand
        desc "Run a command"

        argument :command, default: "bundle install", desc: "The command you'd like to run"
        option :gem, aliases: ["-g"], required: false, desc: "The gem where you want to run the command on"
        option :all, default: false, type: :boolean, desc: "Run the command in all gems."

        def call(command: "bundle install", gem: nil, all: false, **)
          if gem
            say "Running '#{command}' in #{gem}"

            cmd.run(command)
          elsif all
            say gems.inspect
            gems.each do |gem, path|
              say path
              say "Running `#{command}` in #{path}"

              cmd.run(command, chdir: path.to_s)
            end
          else
            say "You must run this command with `--gem GEM_NAME` or `--all`"
          end
        end
      end

      class Setup < BaseCommand
        desc "Setup all the repos"

        def call(gem: nil, **)
          say "Starting the setup process."

          # Make sure we are running the command in the `gems` directory
          current_dir = Dir.pwd.split("/").last
          cwd = if current_dir == "support"
            "#{Dir.pwd}/.."
          else
            Dir.pwd
          end
          repos = gems.keys + %w[testy]

          Dir.chdir(cwd) do
            repos.each do |repo|
              if Dir.exist?(repo)
                say "Skipping clone for #{repo}"
              else
                say "Cloning #{repo}"

                puts `git clone git@github.com:avo-hq/#{repo}.git`
              end
            end

            repos.each do |repo|
              Dir.chdir(repo) do
                unless Dir.glob("*.gemspec").empty?
                  say "Running `bundle install` in #{repo}"
                  puts `bundle install`
                end

                if File.exist?("yarn.lock")
                  say "Running `yarn install` in #{repo}"
                  puts `yarn install`
                end
              end
            end
          end
        end
      end

      chdir = lambda do |args|
        if args[:gem]
          gem_name = (args[:gem] == "avo") ? args[:gem] : "avo-#{args[:gem].gsub("avo-", "")}"

          if Dir.exist?(gem_name)
            Dir.chdir(gem_name)
            say "Running command in #{gem_name}"
            # update the args to have the full gem name
            # EX: if the user passes "--gem dashboards", the gem is transformed to "avo-dashboards"
            args[:gem] = gem_name
          elsif Pathname.new("../#{gem_name}").directory?
            # If the user runs the command from the support or testy dirs, we should be able to continue to run the command
            args[:gem] = gem_name
            Dir.chdir(Pathname.new("../#{gem_name}"))
            say "Running command in #{Pathname.new("../#{gem_name}").realpath}"
          else
            say "Failed to find that gem."
            exit 0
          end
        end
      end

      check_for_gem = lambda do |args|
        if Dir.glob("*.gemspec").empty?
          say "Failed to find a gem in the current directory. Stopping execution."
          exit 0
        end
      end

      register "version", Version, aliases: ["v", "-v", "--version"]

      common_comands = ["bump", "build", "push", "commit", "release"]

      register "run", Run
      register "bump", Bump
      register "build", Build
      register "push", Push
      register "commit", Commit
      register "release", Release
      register "release_all", ReleaseAll
      register "setup", Setup

      before "run", &chdir

      common_comands.each do |c|
        before c, &chdir
        before c, &check_for_gem
      end
    end
  end
end

Dry::CLI.new(Buddy::CLI::Commands).call
